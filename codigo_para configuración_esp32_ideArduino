#include <OneWire.h>
#include <DallasTemperature.h>
#include <ACS712.h>
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/524cd3c2-cea5-40d3-9c05-5f79bad2204e 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float corriente;
  CloudTemperatureSensor temperatura;
  bool rel1;
  bool rel2;
  bool rel3;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#define relay_gpio 25
#define relay2_gpio 26
#define relay3_gpio 27
#define ONE_WIRE_BUS 4
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);
ACS712 ACS(34, 3.3, 4095, 185);
int calibration_factor=0;
void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  sensors.begin();
  pinMode(relay_gpio, OUTPUT);
  pinMode(relay2_gpio, OUTPUT);
  pinMode(relay3_gpio, OUTPUT);
  
}

void loop() {
  ArduinoCloud.update();
  // Your code here
  sensors.requestTemperatures(); 
  temperatura = sensors.getTempCByIndex(0);
  delay(5000);
  float corriente=readCurrent();
  
  
}

float readCurrent(){
  float average =0;
  for (int i=0; i<100; i++){
    average += ACS.mA_AC();
  }
  float mA = (abs(average /100.0)-calibration_factor);
  if (mA<=5)mA=0;
  return mA;
}

/*
  Since Rel1 is READ_WRITE variable, onRel1Change() is
  executed every time a new value is received from IoT Cloud.
*/

void onRel1Change()  {
  // Add your code here to act upon Rel1 change
if (rel1){
    digitalWrite(relay_gpio, LOW);
  } else {
    digitalWrite(relay_gpio, HIGH);
  }
}


/*
  Since Rel2 is READ_WRITE variable, onRel2Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onRel2Change()  {
  // Add your code here to act upon Rel2 change
if (rel2){
    digitalWrite(relay2_gpio, LOW);
  } else {
    digitalWrite(relay2_gpio, HIGH);
  }
}

/*
  Since Rel3 is READ_WRITE variable, onRel3Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onRel3Change()  {
  // Add your code here to act upon Rel3 change
if (rel3){
    digitalWrite(relay3_gpio, LOW);
  } else {
    digitalWrite(relay3_gpio, HIGH);
  }
}


